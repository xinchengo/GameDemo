#pragma once

// The comments in this file are generated by ChatGPT

#include <SFML/Graphics.hpp>
#include <map>
#include <string>

/**   
 * @class TextureManager  
 * @brief Manages loading and retrieving textures.  
 */  
class TextureManager
{
private:
    std::map<std::string, sf::Texture> textures; // map of loaded textures

public:
    /**
     * @brief Loads a texture from file and stores it.
     * @param name The unique name to identify the texture.
     * @param filePath Path to the texture file.
     * @return a boolean, indicating whether succeeded or not
     */
    bool loadFromFile(const std::string& name, const std::string& filePath);
    /**
     * @brief Loads a texture from image and stores it.
     * @param name The unique name to identify the texture.
     * @param image The image
     * @param area Area to select from the image
     * @return a boolean, indicating whether succeeded or not
     */
    bool loadFromImage(const std::string& name, const sf::Image& image, sf::IntRect area);

    /**  
     * @brief Retrieves a texture by its name.  
     * @param name The unique name of the texture.  
     * @return Reference to the requested texture.
     */
    sf::Texture& get(const std::string& name);
};

/**  
 * @class FontManager  
 * @brief Manages loading and retrieving font files.  
 */  
class FontManager
{  
private:
    std::map<std::string, sf::Font> fonts; // map of loaded fonts

public:  
    /**  
     * @brief Loads a font from file and stores it.  
     * @param name The unique name to identify the font.  
     * @param filePath Path to the font file.  
     * @return a boolean, indicating whether succeeded or not
     */  
    bool loadFromFile(const std::string& name, const std::string& filePath);

    /**  
     * @brief Retrieves a font by its name.  
     * @param name The unique name of the font.  
     * @return Reference to the requested font.  
     * @throw std::out_of_range If the font name does not exist.  
     */  
    sf::Font& get(const std::string& name);
};

/**  
 * @class AssetManager  
 * @brief Manages assets for the game, including textures and fonts.  
 *   
 * This class acts as a central point for managing graphical assets,  
 * combining the functionality of the TextureManager and FontManager  
 * to simplify access and resource management within the game.  
 */ 
class AssetManager
{
public:
    TextureManager texture;
    FontManager font;

    /**  
     * @brief Retrieves the instance of the AssetManager.  
     *   
     * This method implements the singleton pattern to ensure that there  
     * is only one instance of the AssetManager throughout the game.  
     *   
     * @return Reference to the single instance of AssetManager.  
     */  
    static AssetManager& getInstance();
};